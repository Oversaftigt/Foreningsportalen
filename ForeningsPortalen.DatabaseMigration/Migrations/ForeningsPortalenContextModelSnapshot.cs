// <auto-generated />
using System;
using ForeningsPortalen.Infrastructure.Database.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForeningsPortalen.DatabaseMigration.Migrations
{
    [DbContext(typeof(ForeningsPortalenContext))]
    partial class ForeningsPortalenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingBookingUnit", b =>
                {
                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId", "BookingUnitId");

                    b.HasIndex("BookingUnitId");

                    b.ToTable("BookingBookingUnit", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("UnionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PostalCode")
                        .HasColumnType("int");

                    b.HasKey("AddressId");

                    b.HasIndex("UnionId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BookingId");

                    b.HasIndex("UserId");

                    b.ToTable("BookingIds", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.BookingUnit", b =>
                {
                    b.Property<Guid>("BookingUnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AdvancePayment")
                        .HasColumnType("float");

                    b.Property<bool>("IsBookingUnitActive")
                        .HasColumnType("bit");

                    b.Property<int>("ReservationLimit")
                        .HasColumnType("int");

                    b.Property<string>("BookingUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fee")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("BookingUnitId");

                    b.HasIndex("CategoryId");

                    b.ToTable("BookingUnit", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.CategoryId", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ReservationLimitType")
                        .HasColumnType("int");

                    b.Property<int>("MaxBookings")
                        .HasColumnType("int");

                    b.Property<string>("BookingUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UnionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CategoryId");

                    b.HasIndex("UnionId");

                    b.ToTable("CategoryId", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatorUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("DateOfUpload")
                        .HasColumnType("date");

                    b.Property<string>("BookingUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<Guid>("UnionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentId");

                    b.HasIndex("CreatorUserId");

                    b.HasIndex("UnionId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBoardPosition")
                        .HasColumnType("bit");

                    b.Property<string>("BookingUnitName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("RoleId");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Union", b =>
                {
                    b.Property<Guid>("UnionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UnionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UnionId");

                    b.ToTable("Unions", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.UserRoleHistory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("RoleAssigned")
                        .HasColumnType("date");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date");

                    b.HasKey("UserId", "RoleId", "RoleAssigned");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRolesHistory", (string)null);
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Member", b =>
                {
                    b.HasBaseType("ForeningsPortalen.Domain.Entities.User");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("MoveInDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("MoveOutDate")
                        .HasColumnType("date");

                    b.HasIndex("AddressId");

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("BookingBookingUnit", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ForeningsPortalen.Domain.Entities.BookingUnit", null)
                        .WithMany()
                        .HasForeignKey("BookingUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Union", "Union")
                        .WithMany("Addresses")
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Union");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Booking", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Member", "User")
                        .WithMany("BookingIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.BookingUnit", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.CategoryId", "CategoryId")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryId");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.CategoryId", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Union", "Union")
                        .WithMany()
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Union");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Document", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Member", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForeningsPortalen.Domain.Entities.Union", "Union")
                        .WithMany("Documents")
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.UserRoleHistory", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Role", "Role")
                        .WithMany("UserHistories")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForeningsPortalen.Domain.Entities.User", "User")
                        .WithMany("RoleHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Member", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Address", "Address")
                        .WithMany("AllTenants")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.Navigation("AllTenants");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Union", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Documents");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.User", b =>
                {
                    b.Navigation("RoleHistories");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Member", b =>
                {
                    b.Navigation("BookingIds");
                });
#pragma warning restore 612, 618
        }
    }
}
