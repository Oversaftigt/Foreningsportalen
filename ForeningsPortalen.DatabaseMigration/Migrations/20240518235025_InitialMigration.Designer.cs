// <auto-generated />
using System;
using ForeningsPortalen.Infrastructure.Database.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ForeningsPortalen.DatabaseMigration.Migrations
{
    [DbContext(typeof(ForeningsPortalenContext))]
    [Migration("20240518235025_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Door")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UnionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UnionId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Union", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unions");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.UserRoleHistory", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId", "FromDate");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRolesHistory");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Member", b =>
                {
                    b.HasBaseType("ForeningsPortalen.Domain.Entities.User");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("MoveInDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("MoveOutDate")
                        .HasColumnType("date");

                    b.Property<Guid>("UnionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("UnionId");

                    b.HasDiscriminator().HasValue("Member");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Union", "Union")
                        .WithMany("Addresses")
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Union");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.UserRoleHistory", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Role", "Role")
                        .WithMany("UserHistories")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForeningsPortalen.Domain.Entities.User", "User")
                        .WithMany("RoleHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Member", b =>
                {
                    b.HasOne("ForeningsPortalen.Domain.Entities.Address", "Address")
                        .WithMany("Members")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ForeningsPortalen.Domain.Entities.Union", "Union")
                        .WithMany()
                        .HasForeignKey("UnionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Union");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Address", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserHistories");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.Union", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("ForeningsPortalen.Domain.Entities.User", b =>
                {
                    b.Navigation("RoleHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
